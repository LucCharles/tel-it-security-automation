---
# tel-it-security-automation :- Ansible roles for automated security hardening.  
# Copyright (c) 2020 Maximilian Hertstein [...] Deutsche Telekom AG 
# contact: devsecops@telekom.de 
# This file is distributed under the conditions of the Apache-2.0 license. 
# For details see the files LICENSING, LICENSE, and/or COPYING on the toplevel.

# ========================================================================
# Deutsch Telekom IT - DevSecOps Team
# ------------------------------------------------------------------------
# Security Hardening & Compliance Checks
# Linux OS for Servers (3.65)
#
# Tasks: 03 Pluggable Authentication Modules
# ========================================================================

# PAM tasks needed for Req-42 - 45

- name: set variable to disable PAM configuration
  set_fact:
    config_pam: false
  when: 
    - not config_req_42 | default(true)
    - not config_req_43 | default(true)
    - not config_req_44 | default(true)
    - not config_req_45 | default(true)

- name: req-42-45.1 register variable for config files for PAM
  stat:
    path: "{{ item }}"
  register: pam_config_files
  with_items:
    - "{{ os_pam_config_files }}"
  when: 
    - config_pam | default(true)
    - not ansible_check_mode
    - not (ansible_distribution == "RedHat" and ansible_distribution_major_version == 8)

- name: req-42-45.2 register variable for config files for PAM config tools
  stat:
    path: "{{ item.0 }}"
  register: pam_config_tool_files
  when: 
    - config_pam | default(true)
    - not ansible_check_mode
    - not (ansible_distribution == "RedHat" and ansible_distribution_major_version == 8)
    - item.1.stat.exists 
    - item.1.stat.islnk
  with_together:
    - "{{ os_pam_config_files }}"
    - "{{ pam_config_files.results }}"

- name: req-42-45.3 copy files from pam config tool to original path
  copy:
    src: "{{ item.2.stat.lnk_source }}"
    dest: "{{ item.0 }}"
    remote_src: yes
    follow: no
  when: 
    - config_pam | default(true) 
    - not ansible_check_mode
    - not (ansible_distribution == "RedHat" and ansible_distribution_major_version == 8)
    - item.1.stat.exists
    - item.1.stat.islnk
  with_together: 
    - "{{ os_pam_config_files }}"
    - "{{ pam_config_files.results }}"
    - "{{ pam_config_tool_files.results }}"

- name: req-42-45.4 check existence of a custom configuration 'devsecops-profile' (Redhat 8)
  stat:
    path: /etc/authselect/custom/devsecops-profile
  register: dir_devsecops_profile
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: req42

- name: req-42-45.5 delete 'devsecops-profile' if it exists and is not a directory (Redhat 8)
  file:
    path: /etc/authselect/custom/devsecops-profile
    state: absent
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
    - dir_devsecops_profile is defined and dir_devsecops_profile.stat is defined and dir_devsecops_profile.stat.exists and not dir_devsecops_profile.stat.isdir 
  tags: req42
  
- name: req-42-45.6 create custom configuration 'devsecops-profile' (Redhat 8)
  ansible.builtin.script: /usr/bin/authselect create-profile devsecops-profile -b sssd --symlink-meta --symlink-pam
  when:
    - dir_devsecops_profile is defined and dir_devsecops_profile.stat is defined and not dir_devsecops_profile.stat.exists
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: req42


- name: req-044.4 (Redhat 8) custom authselect
  lineinfile:
    path: "/etc/authselect/custom/devsecops-profile/{{ item }}"
    regexp: '^auth\s+required\s+pam_faillock\.so\spreauth\ssilent\s+\{include\sif\s\"with-faillock\"\}'
    state: present
    line: auth        required                                     pam_faillock.so preauth silent deny=5 unlock_time=600  {include if "with-faillock"}
  with_items:
    - password-auth
    - system-auth
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: req42

- name: req-044.5 (Redhat 8) custom authselect
  lineinfile:
    path: "/etc/authselect/custom/devsecops-profile/{{ item }}"
    regexp: '^auth\s+required\s+pam_faillock\.so\s+authfail\s+\{include\sif\s\"with-faillock\"\}'
    state: present
    line: auth        required                                     pam_faillock.so authfail deny={{ failed_login_attemps }} unlock_time={{ unlock_time }}        {include if "with-faillock"}
  with_items:
    - password-auth
    - system-auth
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: r
    - eq42

- name: CIS 5.4.3 part 1 (Redhat 8) custom authselect
  lineinfile:
    path: "/etc/authselect/custom/devsecops-profile/{{ item }}"
    regexp: '^password\s+requisite\s+pam_pwquality\.so\s+local_users_only'
    state: present
    line: password    requisite                                    pam_pwquality.so try_first_pass local_users_only retry=3 remember=5
  with_items:
    - system-auth
    - password-auth
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: 
    - req42


- name: CIS 5.4.3 part 2 (Redhat 8) custom authselect
  lineinfile:
    path: "/etc/authselect/custom/devsecops-profile/{{ item }}"
    regexp: '^password\s+sufficient\s+pam_unix\.so'
    state: present
    line: password    sufficient                                   pam_unix.so sha512 shadow {if not "without-nullok":nullok} use_authtok rounds=640000 remember=5
  with_items:
    - system-auth
  when:
    - ansible_distribution == "RedHat" and ansible_distribution_major_version == "8"
  tags: 
    - req42
  notify: authselect 

# Req-42: If PAM is used, it needs to be reconfigured to use strong salted
#         password hash functions while doing many calculation rounds to protect
#         passwords.

- name: req-042.1 configure hashing function for password protection for PAM
  pamd:
    name: "{{ item }}"
    type: "{{ os_pam_hashing_type }}"
    control: "{{ os_pam_hashing_control }}"
    module_path: "{{ os_pam_hashing_module }}"
    module_arguments: "{{ os_pam_hashing_module_arg }}"
    state: args_present
  with_items: 
    - "{{ os_pam_config_files }}"
  when: config_req_42 | default(true)

# Req-43: If PAM is used, password rules must be configured for PAM to
#         force the use of passwords with a minimum length of 12 characters
#         and a combination of three out of the following categories: upper
#         cases, lower case, numbers and special characters.

- name: req-043.1 install PAM password modules (Ubuntu)
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "{{ os_pam_pwmodules }}"
  when: 
    - config_req_43 | default(true)
    - os_install_pam_pwmodules

- name: req-043.2 configure password rules
  template:
    src: pwquality-conf.j2
    dest: '/etc/security/pwquality.conf'
    owner: root
    group: root
    mode: '0644'
  when: 
    - config_req_43 | default(true)
    - os_use_pam_pwquality_conf

- name: req-043.3 configure appropriate password complexity for PAM (Suse)
  pamd:
    name: "{{ item }}"
    type: "{{ os_pam_complexity_type }}"
    control: "{{ os_pam_complexity_control }}"
    module_path: "{{ os_pam_complexity_module }}"
    module_arguments: "{{ os_pam_complexity_module_arg }}"
    state: updated
  with_items: 
    - "{{ os_pam_complexity_files }}"
  when: 
    - config_req_43 | default(true)
    - ansible_os_family == "Suse"

- name: req-043.4 set password expiration to one year in login.defs
  lineinfile:
    dest: '/etc/login.defs'
    state: present
    regexp: '^PASS_MAX_DAYS '
    line: 'PASS_MAX_DAYS 365'
  when: config_req_43 | default(true)


- name: req-043.4 configure appropriate password complexity for PAM (Ubuntu)
  pamd:
    name: "{{ item }}"
    type: "password"
    control: "[success=1 default=ignore]"
    module_path: "pam_unix.so"
    new_type: "{{ os_pam_complexity_type }}"
    new_control: "{{ os_pam_complexity_control }}"
    new_module_path: "{{ os_pam_complexity_module }}"
    module_arguments: "{{ os_pam_complexity_module_arg }}"
    state: before
  with_items: 
    - "{{ os_pam_complexity_files }}"
  when: 
    - config_req_43 | default(true)
    - ansible_distribution == "Ubuntu"

# Req-44: If PAM is used, a protection against brute force and dictionary 
#         attacks that hinder password guessing must be configured in PAM.

- name: req-044.1 configure brute force protection for PAM (Suse) 1/2
  pamd:
    name: "{{ os_pam_fail_login_files }}"
    type: "auth"
    control: "include"
    module_path: "common-auth"
    new_type: "{{ os_pam_fail_login_type }}"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    module_arguments:
      - "deny={{ failed_login_attemps }}"
      - "unlock_time={{ unlock_time }}"
    state: after
  when: 
    - config_req_44 | default(true)
    - ansible_os_family == "Suse"

- name: req-044.2 configure brute force protection for PAM (Suse) 2/2
  pamd:
    name: "{{ os_pam_fail_login_files }}"
    type: "account"
    control: "include"
    module_path: "common-account"
    new_type: "account"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    state: after
  when: 
    - config_req_44 | default(true)
    - ansible_os_family == "Suse"

- name: req-044.3 configure brute force protection for PAM (Ubuntu)
  pamd:
    name: "{{ os_pam_fail_login_files }}"
    type: "account"
    control: "[success=1 new_authtok_reqd=done default=ignore]"
    module_path: "pam_unix.so"
    new_type: "{{ os_pam_fail_login_type }}"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    module_arguments:
      - "deny={{ failed_login_attemps }}"
      - "unlock_time={{ unlock_time }}"
    state: before
  when: 
    - config_req_44 | default(true)
    - ansible_distribution == "Ubuntu"

- name: req-044.4 configure line 1 for pam_faillock.so
  pamd:
    name: "{{ item }}"
    type: "auth"
    control: "sufficient"
    module_path: "pam_unix.so"
    new_type: "{{ os_pam_fail_login_type }}"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    module_arguments: 
      - "preauth"
      - "silent"
      - "deny={{ failed_login_attemps }}"
      - "unlock_time={{ unlock_time }}"
    state: before
  with_items:
    - "{{ os_pam_fail_login_files }}"
  when: 
    - config_req_44 | default(true)
    - os_pam_fail_login_module == "pam_faillock.so"

- name: req-044.5 configure line 2 for pam_faillock.so
  pamd:
    name: "{{ item }}"
    type: "auth"
    control:  "required"
    module_path: "pam_deny.so"
    new_type: "{{ os_pam_fail_login_type }}"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    module_arguments:
      - "authfail"
      - "deny={{ failed_login_attemps }}"
      - "unlock_time={{ unlock_time }}"
    state: before
  with_items:
    - "{{ os_pam_fail_login_files }}"
  when: 
    - config_req_44 | default(true)
    - os_pam_fail_login_module == "pam_faillock.so"

- name: req-044.6 configure line 3 for pam_faillock.so
  pamd:
    name: "{{ item }}"
    type: "account"
    control: "required"
    module_path: "pam_unix.so"
    new_type: "account"
    new_control: "{{ os_pam_fail_login_control }}"
    new_module_path: "{{ os_pam_fail_login_module }}"
    state: before
  with_items:
    - "{{ os_pam_fail_login_files }}"
  when: 
    - config_req_44 | default(true)
    - os_pam_fail_login_module == "pam_faillock.so"

# Req-45: If PAM is used , PAM must be configured that motd did not contain 
#         any sensitive data.

- name: req-045.1 set motd without any sensitive info
  template:
    src: "motd.j2"
    dest: "/etc/motd"
    owner: root
    group: root
    mode: 0644
  when: config_req_45 | default(true)

- name: req-045.2 check for and comment out if found pam_motd.so for PAM
  replace:
    dest: '/etc/pam.d/{{ item }}'
    regexp: '^session\ +optional\ +pam_motd.so*'
    replace: '#session  optional  pam_motd.so'
  with_items: "{{ files_motd }}"
  notify: restart sshd
  when: config_req_45 | default(true)
